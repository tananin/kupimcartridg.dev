<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '0a3717fb453b0541da3f565ef4b83e8e',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => 'aed08e6b9ba4746fd64179d5d58c5d50',
  'native_key' => 4,
  'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"Ace","description":"Ace code editor plugin for MODx Revolution","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * Ace Source Editor Plugin\\n *\\n * Events: OnManagerPageBeforeRender, OnRichTextEditorRegister, OnSnipFormPrerender,\\n * OnTempFormPrerender, OnChunkFormPrerender, OnPluginFormPrerender,\\n * OnFileCreateFormPrerender, OnFileEditFormPrerender, OnDocFormPrerender\\n *\\n * @author Danil Kostin <danya.postfactum(at)gmail.com>\\n *\\n * @package ace\\n *\\n * @var array $scriptProperties\\n * @var Ace $ace\\n *\\/\\nif ($modx->event->name == \'OnRichTextEditorRegister\') {\\n    $modx->event->output(\'Ace\');\\n    return;\\n}\\n\\nif ($modx->getOption(\'which_element_editor\', null, \'Ace\') !== \'Ace\') {\\n    return;\\n}\\n\\n$ace = $modx->getService(\'ace\', \'Ace\', $modx->getOption(\'ace.core_path\', null, $modx->getOption(\'core_path\').\'components\\/ace\\/\').\'model\\/ace\\/\');\\n$ace->initialize();\\n\\n$extensionMap = array(\\n    \'tpl\'   => \'text\\/x-smarty\',\\n    \'htm\'   => \'text\\/html\',\\n    \'html\'  => \'text\\/html\',\\n    \'css\'   => \'text\\/css\',\\n    \'scss\'  => \'text\\/x-scss\',\\n    \'less\'  => \'text\\/x-less\',\\n    \'svg\'   => \'image\\/svg+xml\',\\n    \'xml\'   => \'application\\/xml\',\\n    \'xsl\'   => \'application\\/xml\',\\n    \'js\'    => \'application\\/javascript\',\\n    \'json\'  => \'application\\/json\',\\n    \'php\'   => \'application\\/x-php\',\\n    \'sql\'   => \'text\\/x-sql\',\\n    \'md\'    => \'text\\/x-markdown\',\\n    \'txt\'   => \'text\\/plain\',\\n    \'twig\'  => \'text\\/x-twig\'\\n);\\n\\n\\/\\/ Defines wether we should highlight modx tags\\n$modxTags = false;\\nswitch ($modx->event->name) {\\n    case \'OnSnipFormPrerender\':\\n        $field = \'modx-snippet-snippet\';\\n        $mimeType = \'application\\/x-php\';\\n        break;\\n    case \'OnTempFormPrerender\':\\n        $field = \'modx-template-content\';\\n        $modxTags = true;\\n\\n        switch (true) {\\n            case $modx->getOption(\'twiggy_class\'):\\n                $mimeType = \'text\\/x-twig\';\\n                break;\\n            case $modx->getOption(\'pdotools_fenom_parser\'):\\n                $mimeType = \'text\\/x-smarty\';\\n                break;\\n            default:\\n                $mimeType = \'text\\/html\';\\n                break;\\n        }\\n\\n        break;\\n    case \'OnChunkFormPrerender\':\\n        $field = \'modx-chunk-snippet\';\\n        if ($modx->controller->chunk && $modx->controller->chunk->isStatic()) {\\n            $extension = pathinfo($modx->controller->chunk->getSourceFile(), PATHINFO_EXTENSION);\\n            $mimeType = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\n        } else {\\n            $mimeType = \'text\\/html\';\\n        }\\n        $modxTags = true;\\n\\n        switch (true) {\\n            case $modx->getOption(\'twiggy_class\'):\\n                $mimeType = \'text\\/x-twig\';\\n                break;\\n            case $modx->getOption(\'pdotools_fenom_default\'):\\n                $mimeType = \'text\\/x-smarty\';\\n                break;\\n            default:\\n                $mimeType = \'text\\/html\';\\n                break;\\n        }\\n\\n        break;\\n    case \'OnPluginFormPrerender\':\\n        $field = \'modx-plugin-plugincode\';\\n        $mimeType = \'application\\/x-php\';\\n        break;\\n    case \'OnFileCreateFormPrerender\':\\n        $field = \'modx-file-content\';\\n        $mimeType = \'text\\/plain\';\\n        break;\\n    case \'OnFileEditFormPrerender\':\\n        $field = \'modx-file-content\';\\n        $extension = pathinfo($scriptProperties[\'file\'], PATHINFO_EXTENSION);\\n        $mimeType = isset($extensionMap[$extension])\\n            ? $extensionMap[$extension]\\n            : \'text\\/plain\';\\n        $modxTags = $extension == \'tpl\';\\n        break;\\n    case \'OnDocFormPrerender\':\\n        if (!$modx->controller->resourceArray) {\\n            return;\\n        }\\n        $field = \'ta\';\\n        $mimeType = $modx->getObject(\'modContentType\', $modx->controller->resourceArray[\'content_type\'])->get(\'mime_type\');\\n\\n        switch (true) {\\n            case $mimeType == \'text\\/html\' && $modx->getOption(\'twiggy_class\'):\\n                $mimeType = \'text\\/x-twig\';\\n                break;\\n            case $mimeType == \'text\\/html\' && $modx->getOption(\'pdotools_fenom_parser\'):\\n                $mimeType = \'text\\/x-smarty\';\\n                break;\\n        }\\n\\n        if ($modx->getOption(\'use_editor\')){\\n            $richText = $modx->controller->resourceArray[\'richtext\'];\\n            $classKey = $modx->controller->resourceArray[\'class_key\'];\\n            if ($richText || in_array($classKey, array(\'modStaticResource\',\'modSymLink\',\'modWebLink\',\'modXMLRPCResource\'))) {\\n                $field = false;\\n            }\\n        }\\n        $modxTags = true;\\n        break;\\n    default:\\n        return;\\n}\\n\\n$modxTags = (int) $modxTags;\\n$script = \'\';\\nif ($field) {\\n    $script .= \\"MODx.ux.Ace.replaceComponent(\'$field\', \'$mimeType\', $modxTags);\\";\\n}\\n\\nif ($modx->event->name == \'OnDocFormPrerender\' && !$modx->getOption(\'use_editor\')) {\\n    $script .= \\"MODx.ux.Ace.replaceTextAreas(Ext.query(\'.modx-richtext\'));\\";\\n}\\n\\nif ($script) {\\n    $modx->controller->addHtml(\'<script>Ext.onReady(function() {\' . $script . \'});<\\/script>\');\\n}","locked":0,"properties":null,"disabled":0,"moduleguid":"","static":0,"static_file":"ace\\/elements\\/plugins\\/ace.plugin.php","content":"\\/**\\n * Ace Source Editor Plugin\\n *\\n * Events: OnManagerPageBeforeRender, OnRichTextEditorRegister, OnSnipFormPrerender,\\n * OnTempFormPrerender, OnChunkFormPrerender, OnPluginFormPrerender,\\n * OnFileCreateFormPrerender, OnFileEditFormPrerender, OnDocFormPrerender\\n *\\n * @author Danil Kostin <danya.postfactum(at)gmail.com>\\n *\\n * @package ace\\n *\\n * @var array $scriptProperties\\n * @var Ace $ace\\n *\\/\\nif ($modx->event->name == \'OnRichTextEditorRegister\') {\\n    $modx->event->output(\'Ace\');\\n    return;\\n}\\n\\nif ($modx->getOption(\'which_element_editor\', null, \'Ace\') !== \'Ace\') {\\n    return;\\n}\\n\\n$ace = $modx->getService(\'ace\', \'Ace\', $modx->getOption(\'ace.core_path\', null, $modx->getOption(\'core_path\').\'components\\/ace\\/\').\'model\\/ace\\/\');\\n$ace->initialize();\\n\\n$extensionMap = array(\\n    \'tpl\'   => \'text\\/x-smarty\',\\n    \'htm\'   => \'text\\/html\',\\n    \'html\'  => \'text\\/html\',\\n    \'css\'   => \'text\\/css\',\\n    \'scss\'  => \'text\\/x-scss\',\\n    \'less\'  => \'text\\/x-less\',\\n    \'svg\'   => \'image\\/svg+xml\',\\n    \'xml\'   => \'application\\/xml\',\\n    \'xsl\'   => \'application\\/xml\',\\n    \'js\'    => \'application\\/javascript\',\\n    \'json\'  => \'application\\/json\',\\n    \'php\'   => \'application\\/x-php\',\\n    \'sql\'   => \'text\\/x-sql\',\\n    \'md\'    => \'text\\/x-markdown\',\\n    \'txt\'   => \'text\\/plain\',\\n    \'twig\'  => \'text\\/x-twig\'\\n);\\n\\n\\/\\/ Defines wether we should highlight modx tags\\n$modxTags = false;\\nswitch ($modx->event->name) {\\n    case \'OnSnipFormPrerender\':\\n        $field = \'modx-snippet-snippet\';\\n        $mimeType = \'application\\/x-php\';\\n        break;\\n    case \'OnTempFormPrerender\':\\n        $field = \'modx-template-content\';\\n        $modxTags = true;\\n\\n        switch (true) {\\n            case $modx->getOption(\'twiggy_class\'):\\n                $mimeType = \'text\\/x-twig\';\\n                break;\\n            case $modx->getOption(\'pdotools_fenom_parser\'):\\n                $mimeType = \'text\\/x-smarty\';\\n                break;\\n            default:\\n                $mimeType = \'text\\/html\';\\n                break;\\n        }\\n\\n        break;\\n    case \'OnChunkFormPrerender\':\\n        $field = \'modx-chunk-snippet\';\\n        if ($modx->controller->chunk && $modx->controller->chunk->isStatic()) {\\n            $extension = pathinfo($modx->controller->chunk->getSourceFile(), PATHINFO_EXTENSION);\\n            $mimeType = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\n        } else {\\n            $mimeType = \'text\\/html\';\\n        }\\n        $modxTags = true;\\n\\n        switch (true) {\\n            case $modx->getOption(\'twiggy_class\'):\\n                $mimeType = \'text\\/x-twig\';\\n                break;\\n            case $modx->getOption(\'pdotools_fenom_default\'):\\n                $mimeType = \'text\\/x-smarty\';\\n                break;\\n            default:\\n                $mimeType = \'text\\/html\';\\n                break;\\n        }\\n\\n        break;\\n    case \'OnPluginFormPrerender\':\\n        $field = \'modx-plugin-plugincode\';\\n        $mimeType = \'application\\/x-php\';\\n        break;\\n    case \'OnFileCreateFormPrerender\':\\n        $field = \'modx-file-content\';\\n        $mimeType = \'text\\/plain\';\\n        break;\\n    case \'OnFileEditFormPrerender\':\\n        $field = \'modx-file-content\';\\n        $extension = pathinfo($scriptProperties[\'file\'], PATHINFO_EXTENSION);\\n        $mimeType = isset($extensionMap[$extension])\\n            ? $extensionMap[$extension]\\n            : \'text\\/plain\';\\n        $modxTags = $extension == \'tpl\';\\n        break;\\n    case \'OnDocFormPrerender\':\\n        if (!$modx->controller->resourceArray) {\\n            return;\\n        }\\n        $field = \'ta\';\\n        $mimeType = $modx->getObject(\'modContentType\', $modx->controller->resourceArray[\'content_type\'])->get(\'mime_type\');\\n\\n        switch (true) {\\n            case $mimeType == \'text\\/html\' && $modx->getOption(\'twiggy_class\'):\\n                $mimeType = \'text\\/x-twig\';\\n                break;\\n            case $mimeType == \'text\\/html\' && $modx->getOption(\'pdotools_fenom_parser\'):\\n                $mimeType = \'text\\/x-smarty\';\\n                break;\\n        }\\n\\n        if ($modx->getOption(\'use_editor\')){\\n            $richText = $modx->controller->resourceArray[\'richtext\'];\\n            $classKey = $modx->controller->resourceArray[\'class_key\'];\\n            if ($richText || in_array($classKey, array(\'modStaticResource\',\'modSymLink\',\'modWebLink\',\'modXMLRPCResource\'))) {\\n                $field = false;\\n            }\\n        }\\n        $modxTags = true;\\n        break;\\n    default:\\n        return;\\n}\\n\\n$modxTags = (int) $modxTags;\\n$script = \'\';\\nif ($field) {\\n    $script .= \\"MODx.ux.Ace.replaceComponent(\'$field\', \'$mimeType\', $modxTags);\\";\\n}\\n\\nif ($modx->event->name == \'OnDocFormPrerender\' && !$modx->getOption(\'use_editor\')) {\\n    $script .= \\"MODx.ux.Ace.replaceTextAreas(Ext.query(\'.modx-richtext\'));\\";\\n}\\n\\nif ($script) {\\n    $modx->controller->addHtml(\'<script>Ext.onReady(function() {\' . $script . \'});<\\/script>\');\\n}"}',
);