<?php return array (
  'preserve_keys' => true,
  'update_object' => true,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'cc98bff26efed9e358be95ab9498403c',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => 'b07733b70536f797ea357227fb5d1a5f',
  'native_key' => 42,
  'object' => '{"id":42,"source":0,"property_preprocess":0,"name":"UltimateParent","description":"Return the \\"ultimate\\" parent of a resource.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * @name UltimateParent\\n * @version 1.3\\n * @author Susan Ottwell <sottwell@sottwell.com> March 2006\\n * @author Al B <> May 18, 2007\\n * @author S. Hamblett <shamblett@cwazy.co.uk>\\n * @author Shaun McCormick <shaun@modx.com>\\n * @author Jason Coward <modx@modx.com>\\n *\\n * @param &id The id of the document whose parent you want to find.\\n * @param &top The top node for the search.\\n * @param &topLevel The top level node for the search (root = level 1)\\n *\\n * @license Public Domain, use as you like.\\n *\\n * @example [[UltimateParent? &id=`45` &top=`6`]]\\n * Will find the ultimate parent of document 45 if it is a child of document 6;\\n * otherwise it will return 45.\\n *\\n * @example [[UltimateParent? &topLevel=`2`]]\\n * Will find the ultimate parent of the current document at a depth of 2 levels\\n * in the document hierarchy, with the root level being level 1.\\n *\\n * This snippet travels up the document tree from a specified document and\\n * returns the \\"ultimate\\" parent.  Version 2.0 was rewritten to use the new\\n * getParentIds function features available only in MODx 0.9.5 or later.\\n *\\n * Based on the original UltimateParent 1.x snippet by Susan Ottwell\\n * <sottwell@sottwell.com>.  The topLevel parameter was introduced by staed and\\n * adopted here.\\n *\\/\\nif (!isset($modx)) return \'\';\\n\\n$top = isset($top) && intval($top) ? $top : 0;\\n$id= isset($id) && intval($id) ? intval($id) : $modx->resource->get(\'id\');\\n$topLevel= isset($topLevel) && intval($topLevel) ? intval($topLevel) : 0;\\nif ($id && $id != $top) {\\n    $pid = $id;\\n    $pids = $modx->getParentIds($id);\\n    if (!$topLevel || count($pids) >= $topLevel) {\\n        while ($parentIds= $modx->getParentIds($id, 1)) {\\n            $pid = array_pop($parentIds);\\n            if ($pid == $top) {\\n                break;\\n            }\\n            $id = $pid;\\n            $parentIds = $modx->getParentIds($id);\\n            if ($topLevel && count($parentIds) < $topLevel) {\\n                break;\\n            }\\n        }\\n    }\\n}\\nreturn $id;","locked":0,"properties":null,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * @name UltimateParent\\n * @version 1.3\\n * @author Susan Ottwell <sottwell@sottwell.com> March 2006\\n * @author Al B <> May 18, 2007\\n * @author S. Hamblett <shamblett@cwazy.co.uk>\\n * @author Shaun McCormick <shaun@modx.com>\\n * @author Jason Coward <modx@modx.com>\\n *\\n * @param &id The id of the document whose parent you want to find.\\n * @param &top The top node for the search.\\n * @param &topLevel The top level node for the search (root = level 1)\\n *\\n * @license Public Domain, use as you like.\\n *\\n * @example [[UltimateParent? &id=`45` &top=`6`]]\\n * Will find the ultimate parent of document 45 if it is a child of document 6;\\n * otherwise it will return 45.\\n *\\n * @example [[UltimateParent? &topLevel=`2`]]\\n * Will find the ultimate parent of the current document at a depth of 2 levels\\n * in the document hierarchy, with the root level being level 1.\\n *\\n * This snippet travels up the document tree from a specified document and\\n * returns the \\"ultimate\\" parent.  Version 2.0 was rewritten to use the new\\n * getParentIds function features available only in MODx 0.9.5 or later.\\n *\\n * Based on the original UltimateParent 1.x snippet by Susan Ottwell\\n * <sottwell@sottwell.com>.  The topLevel parameter was introduced by staed and\\n * adopted here.\\n *\\/\\nif (!isset($modx)) return \'\';\\n\\n$top = isset($top) && intval($top) ? $top : 0;\\n$id= isset($id) && intval($id) ? intval($id) : $modx->resource->get(\'id\');\\n$topLevel= isset($topLevel) && intval($topLevel) ? intval($topLevel) : 0;\\nif ($id && $id != $top) {\\n    $pid = $id;\\n    $pids = $modx->getParentIds($id);\\n    if (!$topLevel || count($pids) >= $topLevel) {\\n        while ($parentIds= $modx->getParentIds($id, 1)) {\\n            $pid = array_pop($parentIds);\\n            if ($pid == $top) {\\n                break;\\n            }\\n            $id = $pid;\\n            $parentIds = $modx->getParentIds($id);\\n            if ($topLevel && count($parentIds) < $topLevel) {\\n                break;\\n            }\\n        }\\n    }\\n}\\nreturn $id;"}',
);